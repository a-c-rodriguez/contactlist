/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package contactlist;

import java.util.HashMap;
import java.util.List;
import java.util.Scanner;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import contactlist.dataReaders.FileLoader;

public class App {
    
    private static final String UNKNOWN = "unknown";
    static IContactStore contactStore = new ContactStoreImpl();
    static String verbPattern = "^\\b?(\\w+)\\b?";
    static Pattern verbRegex = Pattern.compile(verbPattern);
    static String mapPattern = "\\b+(\\w+)=([a-zA-Z0-9\\\\\\.\\:\\-]+)+\\b+";
    static Pattern mapRegex = Pattern.compile(mapPattern);

    public static void main(String[] args) throws Exception {
        Scanner scanner = new Scanner(System.in);
        while (true) {
            print("Enter stuff: ");
            String nextLine = scanner.nextLine();
            if (nextLine.trim().equalsIgnoreCase("exit"))
                break;
            Matcher verbMatch = verbRegex.matcher(nextLine);
            String verb = UNKNOWN;
            while(verbMatch.find()){
                verb = verbMatch.group(1);
            }
            print("verb is " +verb);
            switch (verb) {
                case "add":
                    print("ADD!");
                    Contact addContact = Contact.makeContact(0,  getArgs(nextLine));
                    addContact = contactStore.add(addContact); 
                    print("added " + addContact.toStringWithId());
                    break;
                case "delete":
                    print("DELETE!");
                    HashMap removeArgs = getArgs(nextLine);
                    int removeId = 0;
                    if(removeArgs.containsKey("id")){
                        removeId = Integer.parseInt(removeArgs.get("id").toString());
                    }
                    Contact removeContact = Contact.makeContact(removeId, removeArgs);
                    removeContact = contactStore.remove(removeContact);
                    if(null != removeContact){
                        print("removed " + removeContact.toStringWithId());
                    }
                    break;
                case "list":
                    print("LIST!");
                    for(Contact c : contactStore){
                        print(c.toStringWithId());
                    }
                    break;
                case "find":
                    print("FIND!");
                    HashMap findArgs = getArgs(nextLine);
                    int contactId = 0;
                    if(findArgs.containsKey("id")){
                        contactId = Integer.parseInt(findArgs.get("id").toString());
                    }
                    Contact findContact = Contact.makeContact(contactId, findArgs);
                    List<Contact> contacts = contactStore.find(findContact);
                    for(Contact c : contacts){
                        print(c.toStringWithId());
                    }
                    break;
                case "load":
                    print("LOAD!");
                    HashMap loadArgs = getArgs(nextLine);
                    if(loadArgs.containsKey("file")){
                        FileLoader loader = new FileLoader(loadArgs.get("file").toString(), contactStore);
                        loader.processFile();
                    }
                    break;
                case "print":
                    print(contactStore.print());
                    break;
                case "dump":
                    print("DUMP!");
                    break;
                default:
                    print("Unknown command");
            }
        }

        scanner.close();
        print("Goodbye!");
    }

    public static HashMap getArgs(String line) {
        HashMap h = new HashMap<>();
        Matcher m = mapRegex.matcher(line);
        while (m.find()) {
            h.put(m.group(1).toString(), m.group(2));
        }
        //print(h.keySet().stream().map(key -> key + ":" + h.get(key)).collect(Collectors.joining(",","{","}")).toString());
        return h;
    }

    public static void print(String message) {
        System.out.println(message);
    }

}

